<?php

namespace App\Repository\Eloquent;

use App\Models\Challenge;
use App\Models\Offer;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Model;

/**
 *
 */
class ChallengeRepository extends BaseRepository
{

    /**
     * @param Challenge $challenge
     */
    public function __construct(Challenge $challenge)
    {
        parent::__construct($challenge);
    }

    /**
     * @param array $attributes
     * @return Model
     */
    public function create(array $attributes): Model
    {
        return parent::create($attributes); // TODO: Change the autogenerated stub
    }

    /**
     * @param int $id
     * @return Builder|array|Collection|Model
     */
    public function getFullChallengeById(int $id): Builder|array|Collection|Model
    {
        return Challenge::with(
            'solutions', 'author', 'technicalDetails',
            'financial_before', 'teams', 'files', 'teams.users',
            'teams.users.companies', 'solutions.comments', 'solutions.comments.commentator', 'solutions.teams',
            'solutions.teams.users', 'solutions.teams.users.companies', 'solutions.offers', 'project'
        )->find($id);
    }

    /**
     * @param int $id
     * @return Builder|array|Collection|Model
     */
    public function getChallengeById(int $id): Builder|array|Collection|Model
    {
        return Challenge::find($id);
    }

    /**
     * @param Challenge $challenge
     * @return Model
     */
    public function getSelectedOfferByChallenge(Challenge $challenge): Model
    {
        $old_offer = Offer::where('id', '=', $challenge->selected_offer_id)->with('solution')->first();

        return $old_offer;
    }
}
